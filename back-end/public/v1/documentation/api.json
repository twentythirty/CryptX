{
  "swagger": "2.0",
  "info": {
    "description": "This is documentatin for the Node API. For every request you must include in the header: \n `Content-Type: application/json` \n\n <b>Routes with a lock next to them use authorization</b>. In this case, its request-scope JWT tokens in the `Authorization` header coupled with server-side database session persistence. An example secure request would contain the header:\n `Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ...`",
    "version": "0.7.4",
    "title": "CryptX System",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "hello@2030.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "cryptx-app-staging.herokuapp.com",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "user",
      "description": "Creation, authentication and management"
    },
    {
      "name": "security",
      "description": "Roles and Permissions management"
    },
    {
      "name": "MISC",
      "description": "Other"
    }
  ],
  "schemes": [
    "https"
  ],
  "parameters": {
    "investment_id": {
      "name": "investment_id",
      "in": "path",
      "description": "identifier of investment run to fetch",
      "required": true,
      "type": "integer"
    },
    "recipe_id": {
      "name": "recipe_id",
      "in": "path",
      "description": "ID of recipe run",
      "required": true,
      "type": "integer"
    },
    "conversion_id": {
      "name": "conversion_id",
      "in": "path",
      "description": "ID of asset conversion",
      "required": true,
      "type": "integer"
    }
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "MISC"
        ],
        "summary": "Default route (ALL VERBS)",
        "description": "response received when no mathcing route was found for the supplied HTTP verb. While the provided example is a `GET`, this will **work the same on all HTTP verbs**",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          }
        }
      }
    },
    "/cold_storage/{cold_storage_transfer_id}/approve": {
      "post": {
        "tags": [
          "cold storage"
        ],
        "summary": "Approve cold storage transfer",
        "description": "Approve cold storage transfer. After approving, system will initiate transfer. The response should be merged with the currently opened deposit.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cold_storage_transfer_id",
            "in": "path",
            "description": "ID of cold storage transfer",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Coldstorage transfer body",
            "required": false,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ColdStorageTranferListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/cold_storage/all": {
      "post": {
        "tags": [
          "cold storage"
        ],
        "summary": "Get cold storage transfer information",
        "description": "Get cold storage transfers information",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Filter object used to filter out data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ColdStorageTranferListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/cold_storage/custodians/all": {
      "post": {
        "tags": [
          "cold storage"
        ],
        "summary": "Get list of custodians",
        "description": "Get list of custodians",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Filter object used to filter out data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ColdStorageCustodianListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/cold_storage/accounts/all": {
      "post": {
        "tags": [
          "cold storage"
        ],
        "summary": "Get list of cold storage accounts",
        "description": "Get list of cold storage accounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Filter object used to filter out data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ColdStorageAccountListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/cold_storage/accounts/fees": {
      "post": {
        "tags": [
          "cold storage"
        ],
        "summary": "Get list of cold storage accounts fees",
        "description": "Get list of cold storage accounts fees",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Filter object used to filter out data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ColdStorageAccountFeeListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/cold_storage/accounts/add": {
      "post": {
        "tags": [
          "cold storage"
        ],
        "summary": "Add cold storage accounts",
        "description": "Add cold storage accounts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Data needed to add cold storage account",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AddColdStorageAccountParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ColdStorageAccountResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/cold_storage/accounts/{account_id}/edit": {
      "post": {
        "tags": [
          "cold storage"
        ],
        "summary": "Edit a cold storage accounts",
        "description": "Edit cold storage account address or tag, or both",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Cold Storage Account id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Data needed to edit a cold storage account",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EditColdStorageAccountParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ColdStorageAccountResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/exchanges/all": {
      "get": {
        "tags": [
          "exchange"
        ],
        "summary": "Get list of exchanges",
        "description": "Fetch list of exchanges, optionally filtering down to only those allowed to be mapped.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ignore_unmappable",
            "in": "query",
            "description": "Only return exchanges the system considers 'mappable' (MVP)",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ExchangeList"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "exchange"
        ],
        "summary": "Get list of exchanges",
        "description": "Fetches list of exchanges that pass given filter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Filter object used to filter out data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ExchangeList"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/exchanges/{exchange_id}/instruments": {
      "get": {
        "tags": [
          "exchange"
        ],
        "summary": "Get instruments identifiers of exchange",
        "description": "Fetches a list of instrument identifiers. Provides only a list of instrument available in exchange.",
        "parameters": [
          {
            "name": "exchange_id",
            "in": "path",
            "description": "Exchange id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ExchangeInstrumentIDsResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/exchanges/{exchange_id}/accounts/create": {
      "post": {
        "tags": [
          "exchange"
        ],
        "summary": "Create a new exchange account",
        "description": "Creates a new exchange account.",
        "parameters": [
          {
            "name": "exchange_id",
            "in": "path",
            "description": "Exchange id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Information needed for creating an exchange account",
            "required": false,
            "schema": {
              "$ref": "#/definitions/createExchangeAccountParams"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/createExchangeAccountResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/exchanges/accounts/all": {
      "post": {
        "tags": [
          "exchange"
        ],
        "summary": "Get a list of exchange accounts",
        "description": "Get a list of exchange accounts",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Filter object used to filter out data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ExchangeAccountListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/exchanges/accounts/{exchange_account_id}": {
      "post": {
        "tags": [
          "exchange"
        ],
        "summary": "Get a single exchange account",
        "description": "Get a list of exchange accounts",
        "parameters": [
          {
            "name": "exchange_account_id",
            "in": "path",
            "description": "ID of the exchange account",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ExchangeAccountResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/exchanges/accounts/header_lov/{field_name}": {
      "post": {
        "tags": [
          "exchange"
        ],
        "summary": "Get a list of all values for this field in the users view table",
        "description": "Optionally filtered list of all values for a speicfic field in the exchange account admin view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search. For users table, this `field_name` can be: `first_name`, `last_name`, `email`, `is_active`",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "settings"
        ],
        "summary": "Get list of system settings",
        "description": "Fetches all system setting values. Settings values are used to customise application without the need to edit code. Key is used as a identifier for that value. Value is actual value that is saved as string but parsed according to type. Type is and constant that represents type of data that value should be parsed into, it can be integer, float, string or boolean.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SystemSettingsListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/settings/{setting_id}": {
      "post": {
        "tags": [
          "settings"
        ],
        "summary": "Alter system setting",
        "description": "This route is for changing single system setting value. To change setting value all is needed is setting ID and value it should be changed to.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "setting_id",
            "in": "path",
            "description": "ID of system setting",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Information needed to change system setting",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemSettingChange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SystemSettingResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/liquidity_requirements/create": {
      "post": {
        "tags": [
          "liquidity"
        ],
        "summary": "Create new instrument that will be used for trading",
        "description": "Instrument in this system is an asset pair for trading. Instrument consists of two assets, transation asset and quote asset. Freshly created instrument won't be mapped with any of the exchanges so it won't be available for trading at first. Only after mapping instruments with exchanges system will start collecting data for that instrument.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Information needed to create new instrument.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiquidityRequirementCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/CreateOrEditLiqudityRequirementResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/liquidity_requirements/{liquidity_requirement_id}/edit": {
      "post": {
        "tags": [
          "liquidity"
        ],
        "summary": "Edit existing liqudiity requirement",
        "description": "Edit existing liqudiity requirement. Specific exchnages can be updated to \"All Exchanges\" as long as there no other requirements for the same instrument",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "liquidity_requirement_id",
            "in": "path",
            "description": "ID of liquidity requirement",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Information needed to update the requirement",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LiquidityRequirementEdit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/CreateOrEditLiqudityRequirementResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/liquidity_requirements/{liquidity_requirement_id}/delete": {
      "delete": {
        "tags": [
          "liquidity"
        ],
        "summary": "Delete existing liqudiity requirement",
        "description": "Delete existing liqudiity requirement. It will be removed. Forever",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "liquidity_requirement_id",
            "in": "path",
            "description": "ID of liquidity requirement",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/GenericOkResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/liquidity_requirements/{liquidity_requirement_id}": {
      "get": {
        "tags": [
          "liquidity"
        ],
        "summary": "Get liquidity requirement information by ID",
        "description": "Fetches single liquidity requirement information by ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "liquidity_requirement_id",
            "in": "path",
            "description": "ID of liquidity requirement",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/LiquidityRequirementResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/liquidity_requirements/all": {
      "get": {
        "tags": [
          "liquidity"
        ],
        "description": "Fetches data of all liquidity requirements",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/LiquidityRequirementListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "liquidity"
        ],
        "description": "Fetches data of liquidity requirements that pass given filter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Filter object used to filter out data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InstrumentGetListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/liquidity_requirements/{liquidity_requirement_id}/exchanges": {
      "get": {
        "tags": [
          "liquidity"
        ],
        "summary": "Get instrument exchange information by ID of certain liquidity requirement",
        "description": "Fetches data of exchange by liquidity requirement. It gives information of what exchanges passes the requirement, which of the exchanges lack liquidity, when was the last data update.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "liquidity_requirement_id",
            "in": "path",
            "description": "ID of liquidity requirement",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/LiquidityRequirementExchangesResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/instruments/create": {
      "post": {
        "tags": [
          "instrument"
        ],
        "summary": "Create new instrument that will be used for trading",
        "description": "Instrument in this system is an asset pair for trading. Instrument consists of two assets, transation asset and quote asset. Freshly created instrument won't be mapped with any of the exchanges so it won't be available for trading at first. Only after mapping instruments with exchanges system will start collecting data for that instrument.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Information needed to create new instrument.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstrumentCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InstrumentResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/instruments/{instrument_id}": {
      "get": {
        "tags": [
          "instrument"
        ],
        "summary": "Get instrument information by ID",
        "description": "Fetches single instrument information by ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "instrument_id",
            "in": "path",
            "description": "ID of instrument",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InstrumentGetResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/instruments/all": {
      "get": {
        "tags": [
          "instrument"
        ],
        "description": "Fetches data of all instruments",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InstrumentGetListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "instrument"
        ],
        "description": "Fetches data of instruments that pass filter given with this request",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Filter object used to filter out data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InstrumentGetListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/instruments/check_mapping": {
      "post": {
        "tags": [
          "instrument"
        ],
        "summary": "Check if instrument is valid",
        "description": "When mapping instruments with exchanges it's possible that exchange and instrument couldn't be mapped(for example: exchange doesn't support instrument). This route is used to check and ensure that exchange has instrument and it can be used for trading.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Information needed to create new instrument.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstrumentCheckMapping"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InstrumentExchangeMapCheck"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/instruments/{instrument_id}/add_mapping": {
      "post": {
        "tags": [
          "instrument"
        ],
        "summary": "Map instrument with multiple exchanges",
        "description": "When mapping instruments with exchanges",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "instrument_id",
            "in": "path",
            "description": "ID of instrument",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Information needed to create new instrument.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstrumentAddMapping"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InstrumentAddMappingResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/instruments/{instrument_id}/exchanges": {
      "post": {
        "tags": [
          "instrument"
        ],
        "summary": "Get instrument exchange information by ID of instrument",
        "description": "Fetches information about instrument on all exchanges, includes price and volume for last 24 hours and week.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "instrument_id",
            "in": "path",
            "description": "ID of instrument",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InstrumentExchangeMapExpanded"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/instruments/identifiers": {
      "get": {
        "tags": [
          "instrument"
        ],
        "summary": "Fetches insturment external identifiers",
        "description": "Fetches insturment external identifiers",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InstrumentExternalIdentifiers"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/instruments/{instrument_id}/mapping_exchanges": {
      "get": {
        "tags": [
          "instrument"
        ],
        "summary": "**!!!ROUTE DEPRECATED!!!**",
        "description": "Get list of exchanges instrument can be mapped with",
        "parameters": [
          {
            "name": "instrument_id",
            "in": "path",
            "description": "ID of instrument",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ExchangeList"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "instrument"
        ],
        "summary": "**!!!ROUTE DEPRECATED!!!**",
        "description": "Get list of exchanges instrument can be mapped with",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "instrument_id",
            "in": "path",
            "description": "ID of instrument",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Filter object used to filter out data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ExchangeList"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/investment/create": {
      "post": {
        "tags": [
          "investment"
        ],
        "summary": "Start new investment run",
        "description": "Start new investment run. Deposits are accepted in 3 currencies: USD, BTC, ETH. Investment run can be deposit of atleast one of those currencies or all three of them. All deposit amounts will be used during investment run.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Info to start investment run",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateInvestmentRun"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InvestmentRunResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/investment/select_assets": {
      "post": {
        "tags": [
          "investment"
        ],
        "summary": "Create list(mix) of assets to invest into",
        "description": "Before starting invesment run list of assets should be generated and its ID given as an argument to investmnet run creation API method.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Info to start investment run",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateInvestmentAssetGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AssetGroupResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/investments/{investment_id}": {
      "get": {
        "tags": [
          "investment"
        ],
        "description": "Get investment run data by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/investment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InvestmentRunViewResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "investment"
        ],
        "summary": "Get insvestment run togheter with the asset mix",
        "description": "Get insvestment run togheter with the asset mix. Asset mix can be filtered out",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/investment_id"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InvestmentRunAssetMixResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/investments/{investment_id}/deposit_amounts": {
      "get": {
        "tags": [
          "investment"
        ],
        "description": "Get deposit amounts of investment run in different currencies.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/investment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InvestmentAmountsListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/investments/portfolio_stats": {
      "get": {
        "tags": [
          "investment"
        ],
        "description": "Get porfolio statistics, such as subscription amount, mci portfolio asset amounts in usd, and market value over time. Month values are supplied in numbers counting from 0.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InvestmentPortfolioStats"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/investments/timeline": {
      "post": {
        "tags": [
          "investment"
        ],
        "description": "Get timeline of investment run by its or any of its related entity ids(investment_run_id, recipe_run_id, recipe_order_id, execution_order_id). Calculates and returns information about investment run. If investment run has no certain type of entities, it will return null value in its position.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ID of any investment run data to calculate investment run statistics/timeline. Only one of the ID is needed to find investment run. If more IDs are specified, then they will be ignored.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InvestmentRunStatsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InvestmentRunTimeline"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/investments/all": {
      "get": {
        "tags": [
          "investment"
        ],
        "description": "Get investment run data",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InvestmentRunViewListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "investment"
        ],
        "description": "Get investment run data with filtering functionality",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InvestmentRunViewListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/investments/{investment_id}/start_recipe_run": {
      "post": {
        "tags": [
          "investment"
        ],
        "description": "Start a new recipe run on specified investment run.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/investment_id"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Recipe run creation body. This can be empty",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RecipeRunCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeRunResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/recipes/{recipe_id}": {
      "get": {
        "tags": [
          "recipes"
        ],
        "summary": "Get recipe run of investment run.",
        "description": "Get investment run data by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/recipe_id"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeRunWithStatsResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/recipes/of_investment/{investment_id}": {
      "get": {
        "tags": [
          "recipes"
        ],
        "summary": "Get recipe runs of investment run.",
        "description": "Get investment run data by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/investment_id"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeRunViewListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "recipes"
        ],
        "description": "Get recipe run run data by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/investment_id"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeRunViewListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/recipes/all": {
      "post": {
        "tags": [
          "recipes"
        ],
        "description": "Get all recipe runs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeRunViewListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/recipes/{recipe_id}/approve": {
      "post": {
        "tags": [
          "recipes"
        ],
        "summary": "Approve recipe run",
        "description": "In order to continue investment into all the different cryptocurrencies proccess, recipe run must be approved first. After approving recipe run, order groups will need to be approved later after they are generated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/recipe_id"
          },
          {
            "name": "body",
            "in": "body",
            "description": "ID of recipe run to be approved",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecipeRunChangeStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeRunResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/recipes/{recipe_id}/generate_orders": {
      "post": {
        "tags": [
          "recipes",
          "orders"
        ],
        "summary": "Generate recipe orders",
        "description": "After recipe run is confirmed further action is generating recipe orders. This route will help trigger recipe order generation in the system. After orders are generated, next step is approving them. Approved orders will be sent to exchanges.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/recipe_id"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Body of recipe order generation",
            "required": false,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeOrderGenerationResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/recipes/{recipe_id}/calculate_deposits": {
      "post": {
        "tags": [
          "recipes", "deposits"
        ],
        "summary": "Calculate deposists",
        "description": "Calculates how much of eachbase asset needs to be depositet to the Exchanges base on the recipe run detail investment and converted assets.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/recipe_id"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeDepositCalculationResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/recipe_details/{recipe_detail_id}": {
      "get": {
        "tags": [
          "recipe details"
        ],
        "summary": "Get recipe run of investment run.",
        "description": "Get investment run data by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipe_detail_id",
            "in": "path",
            "description": "ID of recipe detail",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeDetailsResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/recipe_details/of_recipe/{recipe_id}": {
      "get": {
        "tags": [
          "recipe details"
        ],
        "summary": "Get recipe run details.",
        "description": "Get recipe run details",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/recipe_id"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeDetailsListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "recipe details"
        ],
        "summary": "Get recipe run details.",
        "description": "Get recipe run details",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/recipe_id"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeDetailsListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/{recipe_order_id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get orders of recipe run by recipe order id",
        "description": "Get orders of recipe run by recipe order id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipe_order_id",
            "in": "path",
            "description": "ID of recipe detail",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeOrderResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/groups/{order_group_id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get orders group info by id",
        "description": "Get orders group info by recipe order group id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order_group_id",
            "in": "path",
            "description": "ID of orders group",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeOrderGroupResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/groups/of_recipe/{recipe_id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get orders group info by recipe run id",
        "description": "Get orders group info by recipe run id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/recipe_id"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeOrderGroupResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/of_recipe/{recipe_id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get orders of recipe run by recipe id",
        "description": "Get orders of recipe run by recipe id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/recipe_id"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeOrderViewListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Get orders of recipe run by recipe id",
        "description": "Get orders of recipe run by recipe id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/recipe_id"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeOrderViewListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/of_group/{recipe_order_group_id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get orders of recipe order group by orders group id",
        "description": "Get orders of recipe order group by order group id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipe_order_group_id",
            "in": "path",
            "description": "ID of the recipe order group to get orders of",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeOrderViewListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Get orders of recipe order group by orders group id",
        "description": "Get orders of recipe order group by order group id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipe_order_group_id",
            "in": "path",
            "description": "ID of the recipe order group to get orders of",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeOrderViewListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/all": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Get all orders",
        "description": "Get all orders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeOrderViewListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/{order_group_id}/alter": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Approve/Reject recipe group",
        "description": "Approve or reject recipe order group by giving status code and rationale for the action.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order_group_id",
            "in": "path",
            "description": "Recipe order group ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecipeOrderAlterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeOrderAlterResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/deposits/{deposit_id}/submit": {
      "post": {
        "tags": [
          "deposits"
        ],
        "summary": "Submit deposit information",
        "description": "Even though deposits are created, they do not hold any actual amounts until they are filled. This route will help to add deposit information such as amount deposited and fee that was deducted. User who added the deposit will be automatically",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deposit_id",
            "in": "path",
            "description": "ID of deposit that will deposit information will be assigned to.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Deposit information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmitDepositInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeDepositResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/deposits/{deposit_id}/approve": {
      "post": {
        "tags": [
          "deposits"
        ],
        "summary": "Approve recipe deposit",
        "description": "Even after recipe deposits are added they need to also be approved. After approving deposits reipe orders could be generated.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deposit_id",
            "in": "path",
            "description": "ID of deposit that will deposit information will be assigned to.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Deposit approval values",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApproveDepositInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeDepositApproveResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/deposits/{deposit_id}": {
      "get": {
        "tags": [
          "deposits"
        ],
        "summary": "Get deposits of recipe by deposit ID",
        "description": "Get deposits of recipe by deposit ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deposit_id",
            "in": "path",
            "description": "ID of recipe deposit",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeDepositResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/deposits/of_recipe/{recipe_id}": {
      "get": {
        "tags": [
          "deposits"
        ],
        "summary": "Get recipe deposits of recipe run by recipe id",
        "description": "Get recipe deposits of recipe run by recipe id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/recipe_id"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeDepositListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "deposits"
        ],
        "summary": "Get recipe deposits of recipe run by recipe id",
        "description": "Get recipe deposits of recipe run by recipe id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/recipe_id"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeDepositListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/deposits/all": {
      "post": {
        "tags": [
          "deposits"
        ],
        "summary": "Get all deposits",
        "description": "Get all deposits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RecipeDepositListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/execution_orders/{execution_order_id}": {
      "get": {
        "tags": [
          "execution orders"
        ],
        "summary": "Get execution order by id",
        "description": "Get execution orders by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "execution_order_id",
            "in": "path",
            "description": "ID of execution order",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ExecutionOrderResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/execution_orders/of_order/{order_id}": {
      "post": {
        "tags": [
          "execution orders"
        ],
        "summary": "Get execution orders of by order id",
        "description": "Get execution orders of by order id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "ID of order to get details of",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ExecutionOrderListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/execution_orders/of_investment_run/{investment_id}": {
      "post": {
        "tags": [
          "execution orders"
        ],
        "summary": "Get execution orders by id of investment run they are in",
        "description": "Get execution orders investment run id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/investment_id"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ExecutionOrderListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/execution_orders/all": {
      "post": {
        "tags": [
          "execution orders"
        ],
        "summary": "Get all execution orders",
        "description": "Get all execution orders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ExecutionOrderListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/exec_orders_fills/{execution_order_fill_id}": {
      "get": {
        "tags": [
          "execution order fills"
        ],
        "summary": "Get execution order fill by id",
        "description": "Get execution order fill by id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "execution_order_fill_id",
            "in": "path",
            "description": "ID of execution order fill",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ExecutionOrderFillResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/exec_orders_fills/of_order/{execution_order_id}": {
      "get": {
        "tags": [
          "execution order fills"
        ],
        "summary": "Get execution order fill by execution order id",
        "description": "Get execution order fill by execution order id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "execution_order_id",
            "in": "path",
            "description": "ID of execution order order to get details of",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ExecutionOrderFillListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "execution order fills"
        ],
        "summary": "Get execution order fill by execution order id",
        "description": "Get execution order fill by execution order id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "execution_order_id",
            "in": "path",
            "description": "ID of execution order order to get details of",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ExecutionOrderFillListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/assets/{asset_id}/change_status": {
      "post": {
        "tags": [
          "assets"
        ],
        "description": "Change asset status to whitelist/blacklist an asset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "description": "identifier of investment run to fecth",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AssetChangeStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AssetResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/assets/{asset_id}": {
      "get": {
        "tags": [
          "assets"
        ],
        "summary": "Get single asset by id",
        "description": "Fetch single asset information.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "description": "ID of asset",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AssetResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/assets/all": {
      "get": {
        "tags": [
          "assets"
        ],
        "description": "Get basic information of all system assets",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AssetListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "assets"
        ],
        "description": "Get basic information of filtered system assets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AssetResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/assets/detailed/{asset_id}": {
      "get": {
        "tags": [
          "assets"
        ],
        "summary": "Get detailed information of single asset",
        "description": "Can be used to get detailed single asset information with status change history. History property will have all status changes of that asset.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "description": "ID of asset",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AssetDetailedResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/assets/detailed/all": {
      "get": {
        "tags": [
          "assets"
        ],
        "description": "Get more detailed information about all assets. This returns many additional values that may not be needed a lot of cases. If functionality doesn't use extra values this route provides please use regular asset information.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AssetDetailedListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "assets"
        ],
        "description": "Get more detailed information about assets that meet filter parameters. This returns many additional values that may not be needed a lot of cases. If functionality doesn't use extra values this route provides please use regular asset information.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/AssetDetailedListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/assets/detailed/of_investment_asset_group/{investment_asset_group_id}": {
      "post": {
        "tags": [
          "assets"
        ],
        "description": "Get detailed list of assets from a specific investment run asset group.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "investment_asset_group_id",
            "in": "path",
            "description": "ID of investment run asset group",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/GroupAssetDetailedListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/roles/create": {
      "post": {
        "tags": [
          "security"
        ],
        "summary": "Create a role",
        "description": "Create a role by provided name and permission codes. Requires the `perm_alter_user_roles` permission and the `perm_view_roles` permission.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Role creation info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRole"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnRoleResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/roles/{role_id}": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "Get ifnormation of role by id",
        "description": "Fetch role by id. Requires the `perm_view_roles` permission",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "identifier of role to fetch",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnRoleResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/roles/all": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "Get a list of roles",
        "description": "The list is optionally filtered when using POST. Requires the `perm_view_roles` permission to fetch.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReturnRolesListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "security"
        ],
        "summary": "Get a list of roles (filtered)",
        "description": "The list is optionally filtered when using POST. Requires the `perm_view_roles` permission to fetch.\nAll filter keys optional. `prop_name_x` refers to direct data proeprty names, equivalent to use inside of an `AND` block in most cases. \nAll `value` keys can be numbers, strings or arrays of the two (`Swagger 2.0` too limiting to show this)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilterWithPerms"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReturnRolesListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/roles/{role_id}/edit": {
      "post": {
        "tags": [
          "security"
        ],
        "summary": "Change infomration of role",
        "description": "Change makes up the role identified by `role_id`. \nRequires the `perm_alter_role_perm` permission",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "identifier of role to change permissions for",
            "required": true,
            "type": "number"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New Role Information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnRoleResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/permissions/list": {
      "get": {
        "tags": [
          "security"
        ],
        "summary": "Get a list of all system permissions, grouped by category",
        "description": "Requires the `perm_view_roles` permission to fetch.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReturnGroupedPermissionsListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/roles/{role_id}/delete": {
      "delete": {
        "tags": [
          "security"
        ],
        "summary": "Delete system role",
        "description": "Delete information related to role `role_id` in the system. Only allowed if no users are currently using the role. Associated role permissions remain unchanged. Requires the `perm_alter_user_roles` permission.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "role_id",
            "in": "path",
            "description": "identifier of role to delete",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Authenticate user",
        "description": "Perform login for specific system user",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Login User",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoginUserResponse"
            }
          },
          "422": {
            "description": "Invalid operation",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        }
      }
    },
    "/users/login/check": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user info and needed information",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AuthCheckResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        }
      }
    },
    "/send_reset_token": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Send password reset token to email",
        "description": "Generated password reset info and sends the token with reset link to supplied email.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Reset password email",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "forgot@password.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          }
        }
      }
    },
    "/password_reset/{token}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Check password reset token validity",
        "description": "Called by FE once the user follows the password reset link in their email. If this returns an error, no password reset for them!",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "description": "Reset password token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Check password reset token validity",
        "description": "Called by FE once the user follows the password reset link in their email. If this returns an error, no password reset for them!",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "description": "Reset password token",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New user password",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "new_password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiSuccessResponse"
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get information of user by id",
        "description": "Fetch user by id. Requires the `perm_view_users` permission, unless viewing yourself (the `me` id)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "identifier of user to fetch. (Either a numeric database id or the predefined string `me`)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/all": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a list of users",
        "description": "The list is optionally filtered when using POST. Requires the `perm_view_users` permission to fetch.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReturnUsersListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Get a list of users (filtered)",
        "description": "The list is optionally filtered when using POST. Requires the `perm_view_users` permission to fetch.\nAll filter keys optional. `prop_name_x` refers to direct data proeprty names, equivalent to use inside of an `AND` block in most cases. \nAll `value` keys can be numbers, strings or arrays of the two (`Swagger 2.0` too limiting to show this)",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ReturnUsersListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/header_lov/{field_name}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a list of all values for this field in the users view table",
        "description": "Optionally filtered list of all values for a speicfic field in the users admin view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search. For users table, this `field_name` can be: `first_name`, `last_name`, `email`, `is_active`",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Get a list of all values for this field in the users view table",
        "description": "Optionally filtered list of all values for a speicfic field in the users admin view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search. For users table, this `field_name` can be: `first_name`, `last_name`, `email`, `is_active`",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/{user_id}/change_role": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Change user roles",
        "description": "Change the roles user has in system",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "identifier of user to fetch. (Either a numeric database id or the predefined string `me`)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New User Roles",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRoles"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          },
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/{user_id}/edit": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Change user basic info",
        "description": "Change the name/active status of user and password if supplied. To change password, old password must be supplied also. Other properties ignored, absent are merged. Requires the `perm_edit_users` permission.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "identifier of user to fetch. (Either a numeric database id or the predefined string `me`)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New basic user information (all properties except for `first_name`, `last_name`, `is_active` and `new_password` are ignored)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserChangeInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          },
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/{user_id}/change_password": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Change logged in user password",
        "description": "Change the password current user uses to login. \nInvalidates all active user sessions except for the current one",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "identifier of user to fetch. (Either a numeric database id or the predefined string `me`)",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "New User password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserPassChange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          },
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/invite": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Invite a new user",
        "description": "Create an invitation and send it via email. The invitation `token` enforces the supplied user role, first name and last name. Requires the `perm_create_users` permission.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create User Invitation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserInvitation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnInvitationSentOK"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/users/invitation": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Fetch invitation info by token",
        "description": "Used by the FE app once the user clicks the link with the token in their email. The FE app should then extract that token from the query parameters and send to this endpoint to receive detailed invitation info and fill in the blanks for the user.<br/> This method will also check invitation validity.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User invitation token",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "3e3b9455-9261-45c1-9aa3-f7e30517b456"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnInvitationResponse"
            }
          }
        }
      }
    },
    "/users/create-invited": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new user by using an invitation object",
        "description": "Create a user from data in hte identified invitation. The invitation integrity is ensured before the creation takes place. New user does not get auto logged in.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create User By Invitation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserByInvite"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          }
        }
      }
    },
    "/users/create": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new user",
        "description": "Create a user from provided data. Does not auto-login created user.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create User",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          }
        }
      }
    },
    "/users/rm/{user_id}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a user",
        "description": "_Soft Delete_ a user in the system by setting their `is_active` flag to `false`. Can be used to deactivate yourself as well. Requires the `perm_delete_users` permission.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "description": "Identifier of user to delete",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ReturnUserResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/assets/detailed/header_lov/{field_name}": {
      "get": {
        "tags": [
          "assets"
        ],
        "summary": "Get a list of all values for this field in the users view table",
        "description": "Optionally filtered list of all values for a speicfic field in the users admin view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search. For users table, this `field_name` can be: `first_name`, `last_name`, `email`, `is_active`",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "assets"
        ],
        "summary": "Get a list of all values for this field in the users view table",
        "description": "Optionally filtered list of all values for a speicfic field in the users admin view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search. For users table, this `field_name` can be: `first_name`, `last_name`, `email`, `is_active`",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/investments/header_lov/{field_name}": {
      "get": {
        "tags": [
          "investment"
        ],
        "summary": "Get a list of all values for this field in the investments run table",
        "description": "Optionally filtered list of all values for a speicfic field in the investments run view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "investment"
        ],
        "summary": "Get a list of all values for this field in the users view table",
        "description": "Optionally filtered list of all values for a speicfic field in the users admin view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search. For users table, this `field_name` can be: `first_name`, `last_name`, `email`, `is_active`",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/recipes/header_lov/{field_name}": {
      "get": {
        "tags": [
          "recipes"
        ],
        "summary": "Get a list of all values for this field in the recipe run view table",
        "description": "Optionally filtered list of all values for a speicfic field in the recipe runs view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "recipes"
        ],
        "summary": "Get a list of all values for this field in the recipes view table",
        "description": "Optionally filtered list of all values for a specific field in the users view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/recipe_details/header_lov/{field_name}": {
      "get": {
        "tags": [
          "recipe details"
        ],
        "summary": "Get a list of all values for this field in the recipe details view table",
        "description": "Optionally filtered list of all values for a specific field in the recipe details view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "recipe details"
        ],
        "summary": "Get a list of all values for this field in the recipe details view table",
        "description": "Optionally filtered list of all values for a specific field in the recipe details view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/deposits/header_lov/{field_name}": {
      "get": {
        "tags": [
          "deposits"
        ],
        "summary": "Get a list of all values for this field in the deposits view table",
        "description": "Optionally filtered list of all values for a specific field in the deposits view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "deposits"
        ],
        "summary": "Get a list of all values for this field in the deposits view table",
        "description": "Optionally filtered list of all values for a specific field in the deposits view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/orders/header_lov/{field_name}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get a list of all values for this field in the orders view table",
        "description": "Optionally filtered list of all values for a specific field in the orders view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Get a list of all values for this field in the orders view table",
        "description": "Optionally filtered list of all values for a specific field in the orders view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/execution_orders/header_lov/{field_name}": {
      "get": {
        "tags": [
          "execution orders"
        ],
        "summary": "Get a list of all values for this field in the execution orders view table",
        "description": "Optionally filtered list of all values for a specific field in the execution view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "execution orders"
        ],
        "summary": "Get a list of all values for this field in the execution orders view table",
        "description": "Optionally filtered list of all values for a speicfic field in the execution orders view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/exec_orders_fills/header_lov/{field_name}": {
      "get": {
        "tags": [
          "execution order fills"
        ],
        "summary": "Get a list of all values for this field in the execution order fill",
        "description": "Optionally filtered list of all values for a speicfic field in the execution order fill table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "execution order fills"
        ],
        "summary": "Get a list of all values for this field in the execution order fill table",
        "description": "Optionally filtered list of all values for a speicfic field in the execution order fill table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/instruments/header_lov/{field_name}": {
      "get": {
        "tags": [
          "instrument"
        ],
        "summary": "Get a list of all values for this field in the users view table",
        "description": "Optionally filtered list of all values for a speicfic field in the users admin view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search. For users table, this `field_name` can be: `first_name`, `last_name`, `email`, `is_active`",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "instrument"
        ],
        "summary": "Get a list of all values for this field in the users view table",
        "description": "Optionally filtered list of all values for a speicfic field in the users admin view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search. For users table, this `field_name` can be: `first_name`, `last_name`, `email`, `is_active`",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/liquidity_requirements/header_lov/{field_name}": {
      "get": {
        "tags": [
          "liquidity"
        ],
        "summary": "Get a list of all values for this field in the users view table",
        "description": "Optionally filtered list of all values for a speicfic field in the users admin view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search. For users table, this `field_name` can be: `first_name`, `last_name`, `email`, `is_active`",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "liquidity"
        ],
        "summary": "Get a list of all values for this field in the users view table",
        "description": "Optionally filtered list of all values for a speicfic field in the users admin view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search. For users table, this `field_name` can be: `first_name`, `last_name`, `email`, `is_active`",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/cold_storage/header_lov/{field_name}": {
      "post": {
        "tags": [
          "cold storage"
        ],
        "summary": "Get a list of all values for this field in the cold storage table",
        "description": "Optionally filtered list of all values for a speicfic field in the cold storage view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search. For users table, this `field_name` can be: `first_name`, `last_name`, `email`, `is_active`",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/cold_storage/accounts/header_lov/{field_name}": {
      "post": {
        "tags": [
          "cold storage"
        ],
        "summary": "Get a list of all values for this field in the cold storage accounts table",
        "description": "Optionally filtered list of all values for a speicfic field in the cold storage view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search. For users table, this `field_name` can be: `first_name`, `last_name`, `email`, `is_active`",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/cold_storage/custodians/header_lov/{field_name}": {
      "post": {
        "tags": [
          "cold storage"
        ],
        "summary": "Get a list of all values for this field in the cold storage custodians table",
        "description": "Optionally filtered list of all values for a speicfic field in the cold storage view table. Used as the set of options in LOV-type headers. The POST version can be used in conjunction with header search. For users table, this `field_name` can be: `first_name`, `last_name`, `email`, `is_active`",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "field_name",
            "in": "path",
            "description": "name of column field to fetch LOV for. corresponds to value used to fill column by entity.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter query",
            "in": "body",
            "description": "the query used to additionally filter the LOV",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LOVFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/HeaderColListResponse"
            }
          },
          "401": {
            "description": "unauthorized - no session",
            "schema": {
              "$ref": "#/definitions/ApiUnauthorizezdResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/conversions/of_recipe/{recipe_id}": {
      "post": {
        "tags": [
          "conversions", "recipes"
        ],
        "summary": "Get a list of asset conversions related to the Recipe Run",
        "description": "Get a list of asset conversions related to the Recipe Run",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/recipe_id"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The filter definition to perform on the data set. If absent will assume empty filter and return all data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitiesFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/InvestmentAssetConverionListResponse"
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/conversions/{conversion_id}/submit": {
      "post": {
        "tags": [
          "conversions"
        ],
        "summary": "Submits an Asset conversion amount",
        "description": "Sets the converted amount, returns an updated conversion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/conversion_id"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Specify the amount that was converted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetConversionComplete"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "conversion": {
                  "$ref": "#/definitions/InvestmentAssetConversionView"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/conversions/{conversion_id}/complete": {
      "post": {
        "tags": [
          "conversions"
        ],
        "summary": "Completes an Asset conversion",
        "description": "Sets the converted amount and marks the conversion as completed, returns an updated conversion. If the amount was submited before, it can be omitted in the body",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/conversion_id"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Specify the amount that was converted",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AssetConversionComplete"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "conversion": {
                  "$ref": "#/definitions/InvestmentAssetConversionView"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "definitions": {
    "ActionLog": {
      "description": "Action log object",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 15
        },
        "timestamp": {
          "type": "string",
          "example": "2018-08-06T12:18:48.478Z"
        },
        "details": {
          "type": "string",
          "example": "Jane Morren changed status to Completed"
        }
      }
    },
    "createExchangeAccountParams": {
      "description": "Exchange account informartion",
      "type": "object",
      "required": ["account_type", "asset_id", "is_active", "address"],
      "properties": {
        "account_type": {
          "type": "number",
          "example": 401
        },
        "asset_id": {
          "type": "number",
          "example": 21
        },
        "address": {
          "type": "string",
          "example": "1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX"
        },
        "is_active": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "AddColdStorageAccountParams": {
      "description": "Cold storage transfer information",
      "type": "object",
      "required": ["strategy_type", "asset_id", "custodian_id", "address"],
      "properties": {
        "strategy_type": {
          "type": "number",
          "example": 102
        },
        "asset_id": {
          "type": "number",
          "example": 21
        },
        "custodian_id": {
          "type": "number",
          "example": 33
        },
        "address": {
          "type": "string",
          "example": "1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX"
        },
        "tag": {
          "type": "string",
          "example": "BTC-213"
        }
      }
    },
    "EditColdStorageAccountParams": {
      "description": "Cold storage transfer information",
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "example": "1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX"
        },
        "tag": {
          "type": "string",
          "example": "BTC-213"
        }
      }
    },
    "createExchangeAccountResponse":  {
      "description": "Response you when crating a new exchange account",
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "example": true
        },
        "exchange_account": {
          "$ref": "#/definitions/RawExchangeAccount"
        }
      }
    },
    "ExchangeAccountListResponse": {
      "description": "A list response for exchange accounts",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "exchange_accounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExchangeAccount"
              }
            }
          }
        }
      ]
    },
    "ExchangeAccountResponse": {
      "description": "Single exchange account response",
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "example": true
        },
        "exchange_account": {
          "$ref": "#/definitions/ExchangeAccount"
        }
      }
    },
    "ColdStorageAccountListResponse": {
      "description": "Cold storage transfer information",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "accounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ColdStorageAccount"
              }
            }
          }
        }
      ]
    },
    "ColdStorageAccountFeeListResponse": {
      "description": "Cold storage accounts fees response",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "fees": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ColdStorageAccountFee"
              }
            }
          }
        }
      ]
    },
    "ColdStorageAccountResponse": {
      "description": "Cold storage transfer information",
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "example": true
        },
        "account": {
          "$ref": "#/definitions/ColdStorageAccount"
        }
      }
    },
    "RawExchangeAccount": {
      "description": "Raw exchange account data",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 18
        },
        "asset_id": {
          "type": "number",
          "example": 2
        },
        "account_type": {
          "type": "number",
          "example": 401
        },
        "is_active": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "ExchangeAccount": {
      "description": "Detailed exchange account",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 18
        },
        "asset_id": {
          "type": "number",
          "example": 2
        },
        "asset": {
          "type": "string",
          "example": "BTC"
        },
        "exchange_id": {
          "type": "number",
          "example": 354
        },
        "exchange": {
          "type": "string",
          "example": "Binance"
        },
        "address": {
          "type": "string",
          "example": "1F1tAaz5x1HUXrCNLbtMDqcw6o5GNn4xqX"
        },
        "is_active": {
          "type": "string",
          "example": "exchange_accounts.is_active.active"
        }
      }
    },
    "ColdStorageAccount": {
      "description": "Cold storage account",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 18
        },
        "asset_id": {
          "type": "number",
          "example": 2
        },
        "asset": {
          "type": "string",
          "example": "Bitcoin"
        },
        "strategy_type": {
          "type": "number",
          "example": 101
        },
        "address": {
          "type": "string",
          "example": "x98m1b4B4Kdk4n2kmadmIxSaiu"
        },
        "custodian": {
          "type": "string",
          "example": "Custodian ID"
        },
        "balance": {
          "type": "number",
          "example": 32
        },
        "balance_usd": {
          "type": "number",
          "example": 186800
        },
        "update_timestamp": {
          "type": "number",
          "example": 1532606182713
        }
      }
    },
    "ColdStorageAccountFee": {
      "description": "Cold storage account fee",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 18
        },
        "creation_timestamp": {
          "type": "number",
          "example": 21313141515
        },
        "amount": {
          "type": "number",
          "example": 6.315185
        },
        "asset": {
          "type": "string",
          "example": "DOGE"
        },
        "cold_storage_account_id": {
          "type": "number",
          "example": 45
        },
        "custodian": {
          "type": "string",
          "example": "CoinCare Ltd."
        },
        "strategy_type": {
          "type": "string",
          "example": "investment.strategy.102"
        }
      }
    },
    "ColdStorageCustodianListResponse": {
      "description": "Cold storage transfer information",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "custodians": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ColdStorageCustodian"
              }
            }
          }
        }
      ]
    },
    "ColdStorageCustodian": {
      "description": "Cold storage transfer information",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 4
        },
        "name": {
          "type": "string",
          "example": "Custodian name"
        }
      }
    },
    "ColdStorageTranferListResponse": {
      "description": "Cold storage transfer information",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "transfers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ColdStorageTransfer"
              }
            }
          }
        }
      ]
    },
    "ColdStorageTransfer": {
      "description": "Cold storage transfer information",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 13
        },
        "asset": {
          "type": "number",
          "example": "BTC"
        },
        "gross_amount": {
          "type": "number",
          "example": 12.05
        },
        "net_amount": {
          "type": "number",
          "example": 14
        },
        "exchange_withrawal_fee": {
          "type": "number",
          "example": 0.01
        },
        "status": {
          "type": "number",
          "example": 91
        },
        "cold_storage_account_id": {
          "type": "number",
          "example": "98512543"
        },
        "custodian": {
          "type": "number",
          "example": "ItBit"
        },
        "strategy": {
          "type": "number",
          "example": "MCI"
        },
        "source_exchange": {
          "type": "number",
          "example": "Bitstamp"
        },
        "source_account": {
          "type": "number",
          "example": "25439851"
        },
        "placed_timestamp": {
          "type": "number",
          "example": 1532097313472
        },
        "completed_timestamp": {
          "type": "number",
          "example": 1532097313472
        }
      }
    },
    "InvestmentPortfolioStats": {
      "description": "Get portfolio statistics. Month vallues are supplied as a numbers starting from 0.",
      "type": "object",
      "properties": {
        "subscription_amount": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "month": {
                  "type": "number",
                  "description": "Month value starts from 0",
                  "example": 2
                },
                "year": {
                  "type": "number",
                  "example": 2018
                },
                "portfolio": {
                  "type": "string",
                  "example": "MCI"
                },
                "subscription": {
                  "type": "number",
                  "example": 11358.522041484963
                }
              }
            }
          }
        },
        "mci_porfolio": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "symbol": {
                "type": "string",
                "example": "BTC"
              },
              "amount": {
                "type": "number",
                "example": 22304
              }
            }
          }
        },
        "market_value": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "month": {
                "type": "number",
                "description": "Month value starts from 0",
                "example": 3
              },
              "year": {
                "type": "number",
                "example": 2018
              },
              "value": {
                "type": "number",
                "description": "Value of porfolio",
                "example": 12000
              }
            }
          }
        }
      }
    },
    "InvestmentRunStatsRequest": {
      "description": "Investment run timeline query object",
      "type": "object",
      "properties": {
        "investment_run_id": {
          "type": "number",
          "example": 2
        },
        "recipe_run_id": {
          "type": "number",
          "example": 2
        },
        "recipe_order_id": {
          "type": "number",
          "example": 2
        },
        "execution_order_id": {
          "type": "number",
          "example": 2
        }
      }
    },
    "InvestmentRunTimeline": {
      "description": "Statuses and statistics on investment run",
      "type": "object",
      "properties": {
        "timeline": {
          "type": "object",
          "properties": {
            "investment_run": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 12
                },
                "started_timestamp": {
                  "type": "number",
                  "example": 1530255424125
                },
                "updated_timestamp": {
                  "type": "number",
                  "example": 1530255424135
                },
                "completed_timestamp": {
                  "type": "number",
                  "example": null
                },
                "strategy_type": {
                  "type": "string",
                  "example": "investment.strategy.102"
                },
                "is_simulated": {
                  "type": "number",
                  "example": true
                },
                "status": {
                  "type": "string",
                  "example": "investment.status.307"
                },
                "deposit_usd": {
                  "type": "number",
                  "example": "399"
                },
                "user_created_id": {
                  "type": "number",
                  "example": 2
                }
              }
            },
            "recipe_run": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 5
                },
                "created_timestamp": {
                  "type": "number",
                  "example": 1530255424172
                },
                "approval_status": {
                  "type": "string",
                  "example": "recipes.status.43"
                },
                "approval_timestamp": {
                  "type": "number",
                  "example": 1533139579735
                },
                "approval_comment": {
                  "type": "string",
                  "example": "I approve this recipe because"
                },
                "investment_run_id": {
                  "type": "number",
                  "example": 15
                },
                "user_created_id": {
                  "type": "number",
                  "example": 2
                },
                "approval_user_id": {
                  "type": "number",
                  "example": 2
                }
              }
            },
            "recipe_deposits": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "example": 7
                },
                "status": {
                  "type": "string",
                  "example": "deposits.status.151"
                }
              }
            },
            "recipe_orders": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "example": 3
                },
                "status": {
                  "type": "string",
                  "example": "order.status.51"
                }
              }
            },
            "execution_orders": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "number",
                  "example": 4
                },
                "execution_order_status": {
                  "type": "string",
                  "example": "execution_orders_timeline.status.307"
                }
              }
            }
          }
        },
        "status": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "ExchangeInstrumentIDsResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "identifiers": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "XRP/BTC"
          }
        }
      }
    },
    "ExchangeList": {
      "description": "List of exchagnes fetched in this response.",
      "type": "object",
      "properties": {
        "exchanges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Exchange"
          }
        },
        "status": {
          "type": "boolean",
          "example": true
        },
        "count": {
          "type": "number",
          "example": 10
        }
      }
    },
    "Exchange": {
      "description": "Exchange for selection in lists. Can be filtered by mappability",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 10
        },
        "name": {
          "type": "string",
          "example": "Bitstamp"
        },
        "is_mappable": {
          "type": "boolean",
          "example": "false"
        }
      }
    },
    "ColumnLOV": {
      "description": "Fetches distinct values of table column. Should help implement filtering.",
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "example": true
        },
        "lov": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "Value 1"
          }
        }
      }
    },
    "SystemSettingChange": {
      "description": "Request body to change single system setting",
      "type": "object",
      "properties": {
        "setting_value": {
          "type": "string",
          "example": 20,
          "description": "It can take anything - string, number, boolean. It will be parsed in the back-end according to what type of value it's set to be."
        }
      }
    },
    "SystemSettingsListResponse": {
      "description": "List of system settings",
      "type": "object",
      "properties": {
        "execution_orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SystemSetting"
          }
        },
        "success": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "SystemSettingResponse": {
      "description": "Single system setting response",
      "type": "object",
      "properties": {
        "setting": {
          "$ref": "#/definitions/SystemSetting"
        },
        "success": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "SystemSetting": {
      "description": "Single system setting data. Key is used as a identifier for that value, and they are use in in code. Value is actual value. Type is and constant that represents type of data, it can be integer, float, string or boolean.",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "key": {
          "type": "number",
          "example": "MARKETCAP_LIMIT_PERCENT"
        },
        "value": {
          "type": "number",
          "example": 90
        },
        "type": {
          "type": "number",
          "description": "Type of value (integer|float|string|boolean)",
          "example": 131
        }
      }
    },
    "LiquidityRequirementExchangesResponse": {
      "description": "List of exchanges for certain liquidity requirement.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "execution_orders": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LiquidityRequirementExchanges"
              }
            }
          }
        }
      ]
    },
    "LiquidityRequirementExchanges": {
      "description": "List of exchanges for certain liquidity requirement.",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 7
        },
        "exchange_id": {
          "type": "number",
          "example": 1
        },
        "exchange": {
          "type": "string",
          "example": "Bitstamp"
        },
        "instrument": {
          "type": "string",
          "example": "XRP/BTC"
        },
        "instrument_identifier": {
          "type": "string",
          "example": "XRP/BTC"
        },
        "last_day_vol": {
          "type": "number",
          "example": 12300
        },
        "last_week_vol": {
          "type": "number",
          "example": 86100
        },
        "last_updated": {
          "type": "number",
          "example": 1531725075560
        },
        "passes": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "LiquidityRequirementListResponse": {
      "description": "Liquidity requirement list response",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "execution_orders": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LiquidityRequirement"
              }
            }
          }
        }
      ]
    },
    "LiquidityRequirementResponse": {
      "description": "Servers response with basic instrument information.",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "liquidity_requirement": {
          "$ref": "#/definitions/LiquidityRequirement"
        }
      }
    },
    "CreateOrEditLiqudityRequirementResponse": {
      "description": "Response when a new liquidity requirement is created or updated",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "liquidity_requirement": {
          "$ref": "#/definitions/RawLiquidityRequirement"
        }
      }
    },
    "RawLiquidityRequirement": {
      "description": "Raw liquidity requirement object",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 5
        },
        "instrument_id": {
          "type": "number",
          "example": 2
        },
        "exchnage_id": {
          "type": "number",
          "example": 1
        },
        "periodicity_in_days": {
          "type": "number",
          "example": 7
        },
        "minimum_volume": {
          "type": "number",
          "example": 15000
        }
      }
    },
    "LiquidityRequirement": {
      "description": "Liquidity requirement view data",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": "5"
        },
        "instrument": {
          "type": "number",
          "example": "BTC/ETH"
        },
        "periodicity": {
          "type": "number",
          "example": 7
        },
        "quote_asset": {
          "type": "number",
          "example": "BTC"
        },
        "minimum_circulation": {
          "type": "number",
          "example": 60000
        },
        "exchange": {
          "type": "number",
          "example": "All exchanges"
        },
        "exchange_count": {
          "type": "number",
          "example": 2
        },
        "exchange_pass": {
          "type": "number",
          "example": 2
        }
      }
    },
    "LiquidityRequirementCreate": {
      "description": "Create liquidity requirement for instrument and exchange (by providing exchange ID) or all exchanges (by providing 'all') in exchange property",
      "type": "object",
      "properties": {
        "instrument_id": {
          "type": "number",
          "example": 10
        },
        "exchange_id": {
          "type": "number",
          "example": 20
        },
        "periodicity": {
          "type": "number",
          "example": 7
        },
        "minimum_circulation": {
          "type": "number",
          "example": 25000
        }
      }
    },
    "LiquidityRequirementEdit": {
      "description": "Update the liqudity requirement exchanges, periodicity or minimum circulation",
      "type": "object",
      "properties": {
        "exchange_id": {
          "type": "number",
          "example": 20
        },
        "periodicity": {
          "type": "number",
          "example": 7
        },
        "minimum_circulation": {
          "type": "number",
          "example": 25000
        }
      }
    },
    "InstrumentExchangeMapExpanded": {
      "description": "Servers response with basic instrument information.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "mapping_data": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/definitions/InstrumentExchangeMap"
                  },
                  {
                    "properties": {
                      "exchange_name": {
                        "type": "string",
                        "example": "Bitstamp0"
                      },
                      "last_week_vol": {
                        "type": "number",
                        "example": 86100
                      },
                      "last_updated": {
                        "type": "number",
                        "example": 1531486061727
                      },
                      "liquidity_rules": {
                        "type": "number",
                        "example": 3
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "InstrumentExternalIdentifiers": {
      "description": "External instrument identifiers",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "identifiers": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "LTC/BTC"
          }
        }
      }
    },
    "InstrumentExchangeMapResponse": {
      "description": "Servers response with basic instrument information.",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "instrument": {
          "$ref": "#/definitions/InstrumentExchangeMap"
        }
      }
    },
    "InstrumentExchangeMapCheck": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "mapping_status": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "InstrumentExchangeMap": {
      "description": "Servers response with instrument information that includes price, trading volume.",
      "type": "object",
      "properties": {
        "instrument_id": {
          "type": "number",
          "example": "5"
        },
        "exchange_id": {
          "type": "number",
          "example": 12
        },
        "external_instrument_id": {
          "type": "number",
          "example": "BTC/USD"
        },
        "current_price": {
          "type": "number",
          "example": 7422.46
        },
        "last_day_vol": {
          "type": "number",
          "example": 12300
        },
        "last_week_vol": {
          "type": "number",
          "example": 86100
        },
        "last_updated": {
          "type": "number",
          "description": "Gives timestamp of when was the last data update for this instrument & exchange",
          "example": 1531486061727
        }
      }
    },
    "InstrumentAddMappingResponse": {
      "description": "Response of successful recipe order status change",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "OK!"
        },
        "success": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "InstrumentAddMapping": {
      "description": "Map multiple instruments with exchanges through array of exchange mapping data",
      "type": "object",
      "properties": {
        "exchange_mapping": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstrumentCheckMapping"
          }
        }
      }
    },
    "InstrumentCheckMapping": {
      "description": "Request data need to map instrument with exchange",
      "type": "object",
      "properties": {
        "exchange_id": {
          "type": "number",
          "example": "12"
        },
        "external_instrument_id": {
          "type": "string",
          "example": "XRP/BTC"
        }
      }
    },
    "InstrumentGetListResponse": {
      "description": "Execution order list response",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "instruments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstrumentGet"
              }
            }
          }
        }
      ]
    },
    "InstrumentGetResponse": {
      "description": "Servers response with basic instrument information.",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "instrument": {
          "$ref": "#/definitions/InstrumentGet"
        }
      }
    },
    "InstrumentGet": {
      "description": "Servers response with basic instrument information.",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 20
        },
        "transaction_asset_id": {
          "type": "number",
          "example": 28
        },
        "quote_asset_id": {
          "type": "number",
          "example": 2
        },
        "symbol": {
          "type": "string",
          "example": "BTC/XRP"
        },
        "exchanges_connected": {
          "type": "number",
          "example": 4
        },
        "exchanges_failed": {
          "type": "number",
          "example": 3
        }
      }
    },
    "InstrumentResponse": {
      "description": "Servers response with basic instrument information.",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "instrument": {
          "$ref": "#/definitions/Instrument"
        }
      }
    },
    "GenericOkResponse": {
      "description": "Sends a generic 'OK!' message response",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "OK!"
        },
        "success": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "Instrument": {
      "description": "The most basic instrument information.",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 11
        },
        "transaction_asset_id": {
          "type": "number",
          "example": 28
        },
        "quote_asset_id": {
          "type": "number",
          "example": 2
        },
        "symbol": {
          "type": "string",
          "example": "XRP/BTC"
        }
      }
    },
    "InstrumentCreate": {
      "description": "Information needed for instrument creation.",
      "type": "object",
      "properties": {
        "transaction_asset_id": {
          "type": "number",
          "example": 28
        },
        "quote_asset_id": {
          "type": "number",
          "example": 2
        }
      }
    },
    "AssetConversionComplete": {
      "description": "Information needed to complete a conversion",
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "example": 198154
        }
      }
    },
    "ExecutionOrderFillListResponse": {
      "description": "Execution order list response",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "execution_order_fills": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecutionOrderFill"
              }
            }
          }
        }
      ]
    },
    "ExecutionOrderFillResponse": {
      "description": "Execution order response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "execution_order_fill": {
          "$ref": "#/definitions/ExecutionOrderFill"
        }
      }
    },
    "ExecutionOrderFill": {
      "description": "Information of single fill for excution order",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 0
        },
        "fill_time": {
          "type": "number",
          "example": 1531396477062
        },
        "fill_price": {
          "type": "number",
          "example": 10.05
        },
        "quantity": {
          "type": "number",
          "example": 3
        }
      }
    },
    "ExecutionOrderListResponse": {
      "description": "Execution order list response",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "execution_orders": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecutionOrder"
              }
            }
          }
        }
      ]
    },
    "ExecutionOrderResponse": {
      "description": "Execution order response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "execution_order": {
          "$ref": "#/definitions/ExecutionOrder"
        }
      }
    },
    "ExecutionOrder": {
      "description": "Detail of recipe run.",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 23
        },
        "instrument": {
          "type": "string",
          "example": "BTC/ETH,"
        },
        "side": {
          "type": "number",
          "example": "999,"
        },
        "type": {
          "type": "number",
          "example": "71,"
        },
        "price": {
          "type": "number",
          "example": "12.01,"
        },
        "total_quantity": {
          "type": "number",
          "example": "6.01,"
        },
        "filled_quantity": {
          "type": "number",
          "example": "3.69"
        },
        "exchange_trading_fee": {
          "type": "number",
          "example": "1.01"
        },
        "status": {
          "type": "number",
          "example": "61"
        },
        "submission_time": {
          "type": "number",
          "example": 1531396477062
        },
        "completion_time": {
          "type": "number",
          "example": 1531396477062
        }
      }
    },
    "RecipeDepositListResponse": {
      "description": "Recipe deposit list response",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "recipe_deposits": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecipeDeposit"
              }
            }
          }
        }
      ]
    },
    "RecipeDepositResponse": {
      "description": "Recipe deposit response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "recipe_deposit": {
          "$ref": "#/definitions/RecipeDeposit"
        },
        "action_logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionLog"
          }
        }
      }
    },
    "RecipeDepositApproveResponse": {
      "description": "Recipe deposit response after approval",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "recipe_deposit": {
          "$ref": "#/definitions/RecipeDepositAfterApproval"
        }
      }
    },
    "SubmitDepositInfo": {
      "description": "Parameters for adding deposit information",
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "example": 15.12
        },
        "deposit_management_fee": {
          "type": "number",
          "example": 1.1
        }
      }
    },
    "ApproveDepositInfo": {
      "description": "Parameters for approving a pending deposit",
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "example": 15.12
        },
        "deposit_management_fee": {
          "type": "number",
          "example": 1.1
        }
      }
    },
    "RecipeDeposit": {
      "description": "Recipe deposit details",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 0
        },
        "transaction_asset_id": {
          "type": "number",
          "example": 2
        },
        "exchange_id": {
          "type": "number",
          "example": 1
        },
        "transaction_asset": {
          "type": "string",
          "example": "BTC"
        },
        "exchange": {
          "type": "string",
          "example": "BITSTAMP"
        },
        "account": {
          "type": "number",
          "example": 1541154
        },
        "amount": {
          "type": "number",
          "example": 165165
        },
        "investment_percentage": {
          "type": "number",
          "example": 64
        },
        "status": {
          "type": "number",
          "example": 150
        }
      }
    },
    "RecipeDepositAfterApproval": {
      "description": "Recipe deposit objectafter approval",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 421
        },
        "recipe_run_id": {
          "type": "number",
          "example": 213
        },
        "asset_id": {
          "type": "number",
          "example": 86
        },
        "amount": {
          "type": "number",
          "example": 165165
        },
        "deposit_management_fee": {
          "type": "number",
          "example": 5665
        },
        "creation_timestamp": {
          "type": "number",
          "example": 1533286541746
        },
        "completed_timestamp": {
          "type": "number",
          "example": 1533286541746
        },
        "depositor_user_id": {
          "type": "number",
          "example": 12
        },
        "depositor_user": {
          "type": "string",
          "example": "John Xena"
        },
        "status": {
          "type": "string",
          "example": "deposits.status.151"
        }
      }
    },
    "RecipeOrderAlterResponse": {
      "description": "Response of successful recipe order status change",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "OK!"
        },
        "success": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "RecipeOrderAlterRequest": {
      "description": "Parameters needed to approve or reject recipe order",
      "type": "object",
      "properties": {
        "status": {
          "type": "number",
          "example": 82
        },
        "comment": {
          "type": "string",
          "example": "Approve this recipe order group because..."
        }
      }
    },
    "RecipeOrderViewListResponse": {
      "description": "Recipe order list response",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "recipe_orders": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecipeOrderView"
              }
            }
          }
        }
      ]
    },
    "RecipeOrderResponse": {
      "description": "Recipe order response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "recipe_order": {
          "$ref": "#/definitions/RecipeOrder"
        }
      }
    },
    "RecipeOrderGroupResponse": {
      "description": "Recipe order group response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "recipe_order_group": {
          "$ref": "#/definitions/RecipeOrderGroup"
        }
      }
    },
    "RecipeDepositCalculationResponse": {
      "description": "Recipe run deposit calculation reponse",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "deposits": {
          "$ref": "#/definitions/RecipeDeposit"
        }
      }
    },
    "RecipeOrderGenerationResponse": {
      "description": "Response of recipe orders list",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 5
          },
          "recipe_order_group_id": {
            "type": "number",
            "example": 2
          },
          "instrument_id": {
            "type": "number",
            "example": 5
          },
          "target_exchange_id": {
            "type": "number",
            "example": 6
          },
          "price": {
            "type": "number",
            "example": 0.11588
          },
          "quantity": {
            "type": "number",
            "example": 32792.54401104591
          },
          "side": {
            "type": "number",
            "example": 888
          },
          "status": {
            "type": "number",
            "example": 51
          }
        }
      }
    },
    "RecipeOrderView": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RecipeOrder"
        },
        {
          "properties": {
            "recipe_run_id": {
              "type": "number",
              "example": 5
            },
            "investment_id": {
              "type": "number",
              "example": 15
            },
            "instrument": {
              "type": "string",
              "example": "BTC/USD"
            },
            "side": {
              "type": "string",
              "example": "orders.side.999"
            },
            "target_exchange_id": {
              "type": "number",
              "example": 1
            },
            "exchange": {
              "type": "string",
              "example": "Binance"
            },
            "status": {
              "type": "string",
              "example": "orders.status.51"
            },
            "created_timestamp": {
              "type": "number",
              "example": 1533052040000
            },
            "completed_timestamp": {
              "type": "number",
              "example": 1533052040000
            }
          }
        }
      ]
    },
    "RecipeOrder": {
      "description": "Recipe order details",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 4
        },
        "recipe_order_group_id": {
          "type": "number",
          "example": 58
        },
        "instrument_id": {
          "type": "number",
          "example": 5
        },
        "side": {
          "type": "number",
          "example": 999
        },
        "price": {
          "type": "number",
          "example": 100
        },
        "quantity": {
          "type": "number",
          "example": 7
        },
        "status": {
          "type": "number",
          "example": 51
        },
        "sum_of_exhange_trading_fee": {
          "type": "number",
          "example": 100
        }
      }
    },
    "RecipeOrderGroup": {
      "description": "Recipe order group details",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 4
        },
        "created_timestamp": {
          "type": "number",
          "example": 15683498502378
        },
        "status": {
          "type": "string",
          "example": "orders_group.status.83"
        },
        "approval_user": {
          "type": "string"
        },
        "approval_comment": {
          "type": "string"
        }
      }
    },
    "RecipeDetailsListResponse": {
      "description": "Recipe details list response",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "recipes_details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecipeDetails"
              }
            }
          }
        }
      ]
    },
    "RecipeDetailsResponse": {
      "description": "Recipe details response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "recipe_detail": {
          "$ref": "#/definitions/RecipeDetails"
        }
      }
    },
    "RecipeDetails": {
      "description": "Detail of recipe run.",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 15
        },
        "investment_percentage": {
          "type": "number",
          "example": 5.67945412594929
        },
        "recipe_run_id": {
          "type": "number",
          "example": 5
        },
        "transaction_asset_id": {
          "type": "number",
          "example": 2
        },
        "quote_asset_id": {
          "type": "number",
          "example": 2
        },
        "target_exchange_id": {
          "type": "number",
          "example": 5
        },
        "transaction_asset": {
          "type": "string",
          "example": "BTC"
        },
        "quote_asset": {
          "type": "string",
          "example": "XRP"
        },
        "target_exchange": {
          "type": "string",
          "example": "bitstamp"
        },
        "investment_usd": {
          "type": "number",
          "example": 125462
        },
        "investment_btc": {
          "type": "number",
          "example": 2.6
        },
        "investment_eth": {
          "type": "number",
          "example": 36.78
        }
      }
    },
    "ListResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "count": {
          "type": "number",
          "example": 10
        },
        "footer": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "property_name"
              },
              "value": {
                "type": "number",
                "example": 10
              },
              "template": {
                "type": "string",
                "example": "translation.key.property_name"
              },
              "args": {
                "type": "object",
                "properties": {
                  "property_name": {
                    "type": "number",
                    "example": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "RecipeRunChangeStatus": {
      "description": "Recipe run response",
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean",
          "example": true
        },
        "recipe_run": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecipeRun"
          }
        }
      }
    },
    "RecipeRunViewListResponse": {
      "description": "Recipe run response",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "recipes_runs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RecipeRunView"
              }
            }
          }
        }
      ]
    },
    "InvestmentAssetConverionListResponse": {
      "description": "Recipe run Asset conversion response",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "conversions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvestmentAssetConversionView"
              }
            }
          }
        }
      ]
    },
    "RecipeRunWithStatsResponse": {
      "description": "Recipe run response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "recipe_run": {
          "$ref": "#/definitions/RecipeRun"
        },
        "recipe_stats": {
          "description": "Statistics of how much orders, execution orders and deposits recipe run has.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Orders"
              },
              "count": {
                "type": "number",
                "example": 20
              }
            }
          }
        }
      }
    },
    "RecipeRunViewResponse": {
      "description": "Recipe run response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "recipe_run": {
          "$ref": "#/definitions/RecipeRunView"
        }
      }
    },
    "RecipeRunResponse": {
      "description": "Recipe run response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "recipe_run": {
          "$ref": "#/definitions/RecipeRun"
        }
      }
    },
    "RecipeRunCreateRequest": {
      "description": "Request body for recipe run creation",
      "type": "object"
    },
    "RecipeRunView": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/RecipeRun"
        },
        {
          "properties": {
            "user_created": {
              "type": "string",
              "example": "John Doe"
            },
            "approval_user": {
              "type": "string",
              "example": "John Doe"
            },
            "approval_status": {
              "type": "string",
              "example": "recipes.status.42"
            }
          }
        }
      ]
    },
    "InvestmentAssetConversionView" :{
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 6
        },
        "recipe_run_id": {
          "type": "number",
          "example": 9
        },
        "investment_currency": {
          "type": "string",
          "example": "USD"
        },
        "investment_amount": {
          "type": "number",
          "example": 19988989.655
        },
        "target_currency": {
          "type": "string",
          "example": "BTC"
        },
        "converted_amount": {
          "type": "number",
          "example": 69
        },
        "status": {
          "type": "string",
          "example": "asset_conversions.status.501"
        }
      }
    },
    "RecipeRun": {
      "description": "Recipe run",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 10
        },
        "created_timestamp": {
          "type": "number",
          "example": 1525424340810
        },
        "investment_run_id": {
          "type": "number",
          "example": 10
        },
        "user_created_id": {
          "type": "number",
          "example": 4
        },
        "approval_status": {
          "type": "number",
          "example": 41
        },
        "approval_timestamp": {
          "type": "number",
          "example": 1525424340810
        },
        "approval_comment": {
          "type": "string",
          "example": "I approve this recipe run because..."
        },
        "approval_user_id": {
          "type": "number",
          "example": 6
        }
      }
    },
    "AssetChangeStatus": {
      "description": "Change asset status - blacklist or whitelist. Blacklisting an asset means it won't be considered in future recipe runs.",
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "example": "Whitelist this asset because..."
        },
        "type": {
          "type": "number",
          "example": 400
        }
      }
    },
    "AssetDetailedListResponse": {
      "description": "Server response with array of detailed asset information",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "success": {
              "type": "boolean",
              "example": true
            },
            "asset": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetDetailed"
              }
            }
          }
        }
      ]
    },
    "GroupAssetDetailedListResponse": {
      "description": "Server response with array of detailed asset information",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "success": {
              "type": "boolean",
              "example": true
            },
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupAsset"
              }
            }
          }
        }
      ]
    },
    "AssetDetailedResponse": {
      "description": "Server response with detailed asset information",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "asset": {
          "$ref": "#/definitions/AssetDetailed"
        },
        "status_changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetStatusChangeHistory"
          }
        }
      }
    },
    "AssetDetailed": {
      "description": "More detailed information about asset.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Asset"
        },
        {
          "properties": {
            "is_cryptocurrency": {
              "type": "string",
              "example": "assets.is_cryptocurrency.yes"
            },
            "is_base": {
              "type": "string",
              "example": "asset.is_base.yes"
            },
            "is_deposit": {
              "type": "string",
              "example": "asset.id_deposit.no"
            },
            "capitalization": {
              "type": "number",
              "example": 130000000
            },
            "nvt_ratio": {
              "type": "number",
              "example": 22
            },
            "market_share": {
              "type": "number",
              "example": 37
            },
            "capitalization_updated": {
              "type": "number",
              "example": 1525424340810
            },
            "status": {
              "type": "string",
              "example": "assets.status.400"
            },
            "comment": {
              "type": "string",
              "example": "I request the return of this fine asset"
            }
          }
        }
      ]
    },
    "GroupAsset": {
      "description": "Asset object belonging to the Asset mix.",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 22
        },
        "symbol": {
          "type": "string",
          "example": "ETH"
        },
        "long_name": {
          "type": "string",
          "example": "Ethereum"
        },
        "capitalization": {
          "type": "number",
          "example": 130000000
        },
        "nvt_ratio": {
          "type": "number",
          "example": 22
        },
        "market_share": {
          "type": "number",
          "example": 37
        },
        "status": {
          "type": "string",
          "example": "assets.status.400"
        },
        "comment": {
          "type": "string",
          "example": "I request the return of this fine asset"
        }
      }
    },
    "AssetListResponse": {
      "description": "Example of a response where list of assets are returned",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "count": {
          "type": "number",
          "example": 20
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        }
      }
    },
    "AssetResponse": {
      "description": "Example of server response when asset is retured",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "asset": {
          "$ref": "#/definitions/Asset"
        }
      }
    },
    "Asset": {
      "description": "Asset, in other words - cryptocurrency, that is used in system for trading purposes.",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 22
        },
        "symbol": {
          "type": "string",
          "example": "ETH"
        },
        "long_name": {
          "type": "string",
          "example": "Ethereum"
        },
        "is_base": {
          "type": "boolean",
          "example": true
        },
        "is_deposit": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "AssetStatusChangeHistory": {
      "description": "Single entry of asset status history.",
      "type": "object",
      "properties": {
        "asset_id": {
          "type": "number",
          "example": 3
        },
        "timestamp": {
          "type": "number",
          "example": 1525424340810
        },
        "comment": {
          "type": "string",
          "example": "WHITELISTED"
        },
        "type": {
          "type": "string",
          "example": "asset.status.402"
        },
        "user": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "example": "asdf@asdf.as"
            },
            "id": {
              "type": "number",
              "example": 5
            },
            "name": {
              "type": "string",
              "example": "John Doe"
            }
          }
        }
      }
    },
    "CreateInvestmentRun": {
      "description": "Fill out investment run information to start investment run.",
      "type": "object",
      "properties": {
        "strategy_type": {
          "type": "number",
          "example": 101
        },
        "is_simulated": {
          "type": "boolean",
          "example": true
        },
        "deposit_amounts": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "example": [
            {
              "symbol": "USD",
              "amount": 10000.5
            },
            {
              "symbol": "BTC",
              "amount": 2
            },
            {
              "symbol": "ETH",
              "amount": 22.43
            }
          ]
        },
        "investment_group_asset_id": {
          "type": "number",
          "example": 5
        }
      }
    },
    "CreateInvestmentAssetGroup": {
      "type": "object",
      "properties": {
        "strategy_type": {
          "type": "number",
          "example": 102
        }
      }
    },
    "AssetGroupResponse": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "list": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 10
                },
                "created_timestamp": {
                  "type": "number",
                  "example": 1532097313472
                },
                "user_id": {
                  "type": "number",
                  "example": 10
                },
                "group_assets": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/GroupAsset"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "InvestmentRunViewListResponse": {
      "description": "Single investment run information",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "investment_runs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvestmentRunView"
              }
            }
          }
        }
      ]
    },
    "InvestmentRunViewResponse": {
      "description": "Single investment run information",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "investment_run": {
          "$ref": "#/definitions/InvestmentRunView"
        },
        "asset_mix": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetMixItem"
          }
        }
      }
    },
    "InvestmentRunResponse": {
      "description": "Single investment run information",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "investment_run": {
          "$ref": "#/definitions/InvestmentRun"
        }
      }
    },
    "InvestmentAmountsListResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "deposit_amounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvestmentAmount"
          }
        }
      }
    },
    "InvestmentAmount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 46
        },
        "investment_run_id": {
          "type": "number",
          "example": 52
        },
        "currency_name": {
          "type": "string",
          "example": "Bitcoin"
        },
        "currency_symbol": {
          "type": "string",
          "example": "BTC"
        },
        "amount": {
          "type": "number",
          "example": 100
        },
        "value_usd": {
          "type": "number",
          "example": 649712
        }
      }
    },
    "InvestmentRunAssetMixResponse": {
      "description": "Single investment run information with asset mix",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "success": {
              "type": "boolean",
              "example": true
            },
            "investment_run": {
              "$ref": "#/definitions/InvestmentRun"
            },
            "asset_mix": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetMixItem"
              }
            }
          }
        }
      ]
    },
    "InvestmentRunView": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/InvestmentRun"
        },
        {
          "properties": {
            "user_created": {
              "type": "string",
              "example": "John Doe"
            },
            "strategy_type": {
              "type": "string",
              "example": "investment.strategy.102"
            },
            "is_simulated": {
              "type": "string",
              "example": "investment.is_simulated.yes"
            },
            "status": {
              "type": "string",
              "example": "investment.status.307"
            }
          }
        }
      ]
    },
    "InvestmentRun": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "started_timestamp": {
          "type": "number",
          "example": 1525424340810
        },
        "updated_timestamp": {
          "type": "number",
          "example": 1525424340810
        },
        "completed_timestamp": {
          "type": "number",
          "example": null
        },
        "user_created_id": {
          "type": "number",
          "example": 6
        },
        "strategy_type": {
          "type": "number",
          "example": 101
        },
        "is_simulated": {
          "type": "boolean",
          "example": true
        },
        "status": {
          "type": "number",
          "example": 301
        },
        "deposit_usd": {
          "type": "number",
          "example": 11000
        }
      }
    },
    "AssetMixItem": {
      "description": "Asset mix object which accompanies the investment run",
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 1
        },
        "symbol": {
          "type": "string",
          "example": "LTC"
        },
        "long_name": {
          "type": "string",
          "example": "Litecoin"
        },
        "capitalization": {
          "type": "number",
          "example": 578943737543349
        },
        "nvt_ratio": {
          "type": "number",
          "example": 69.69
        },
        "market_share": {
          "type": "number",
          "example": 54.65
        }
      }
    },
    "AuthCheckResponse": {
      "description": "User, his permissions, and model constants information that will be used to change number values to user friendly values.",
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/UserDetails"
        },
        "permissions": {
          "$ref": "#/definitions/PermissionsList"
        },
        "modal_constants": {
          "$ref": "#/definitions/ModelConstants"
        },
        "success": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "PermissionsList": {
      "description": "List of permissions user has. Some of the values might repeat.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "EntitiesFilter": {
      "description": "Entity filter. Scoped to a `filter` key to easily combine with other POST data.",
      "type": "object",
      "properties": {
        "filter": {
          "type": "object",
          "properties": {
            "or": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterField"
              }
            },
            "and": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterField"
              }
            },
            "not": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FilterField"
              }
            },
            "prop_name_X": {
              "type": "string",
              "example": "serah|-77..."
            },
            "prop_name_1": {
              "type": "object",
              "required": [
                "value",
                "expression"
              ],
              "properties": {
                "value": {
                  "type": "string"
                },
                "expression": {
                  "type": "string",
                  "example": "eq|ne|or|and|lt|gte..."
                },
                "type": {
                  "type": "string",
                  "example": "timestamp|date|number|string"
                }
              }
            },
            "prop_name_2": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "expression": {
                  "type": "string",
                  "example": "eq|ne|or|and|lt|gte..."
                }
              }
            }
          }
        },
        "limit": {
          "type": "integer",
          "description": "How many rows to output",
          "example": 10
        },
        "offset": {
          "type": "integer",
          "description": "How many rows to skip",
          "example": 20
        },
        "order": {
          "type": "array",
          "description": "Set order to return results in. Can sort by multiple properties. Property \"by\" specifies property/values to sort by, and \"order\" specifies in what order that property should be sorted (asc - ascending / desc - descending)",
          "items": {
            "type": "object",
            "properties": {
              "by": {
                "type": "string",
                "example": "first_name"
              },
              "order": {
                "type": "string",
                "example": "asc|desc"
              }
            }
          }
        }
      }
    },
    "EntitiesFilterWithPerms": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/EntitiesFilter"
        }
      ],
      "properties": {
        "has_permissions": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "perm_view_users"
          }
        }
      }
    },
    "FilterField": {
      "type": "object",
      "required": [
        "field",
        "value",
        "expression"
      ],
      "properties": {
        "field": {
          "type": "string",
          "example": "id|name|..."
        },
        "value": {
          "type": "string",
          "example": "5|johny|..."
        },
        "expression": {
          "type": "string",
          "example": "eq|ne|or|and|lt|gte..."
        },
        "type": {
          "type": "string",
          "example": "timestamp|date|number|string",
          "description": "Specifies what type of value is given for filtering. If you want to send timestamp, you have to send type timestamp, otherwise it back-end will use timestamp as string to compare agains dates."
        }
      }
    },
    "CreateUser": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doh"
        },
        "email": {
          "type": "string",
          "example": "john.doe@cryptx.io"
        },
        "password": {
          "type": "string",
          "example": "secure-password"
        }
      }
    },
    "CreateRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Investment Manager"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "perm_run_investments"
          }
        }
      }
    },
    "CreateUserByInvite": {
      "type": "object",
      "properties": {
        "invitation_id": {
          "type": "number",
          "example": 884
        },
        "password": {
          "type": "string",
          "example": "tiger"
        }
      }
    },
    "CreateUserInvitation": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doh"
        },
        "email": {
          "type": "string",
          "example": "john.doe@notcryptx.io"
        },
        "role_id": {
          "type": "number",
          "example": 88
        }
      }
    },
    "LoginUserRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "tester@cryptx.io"
        },
        "password": {
          "type": "string",
          "example": "test"
        }
      }
    },
    "LoginUserResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "token": {
          "type": "string",
          "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ...",
          "description": "Authentication token"
        },
        "user": {
          "$ref": "#/definitions/UserDetails"
        },
        "permissions": {
          "$ref": "#/definitions/PermissionsList"
        },
        "model_constants": {
          "$ref": "#/definitions/ModelConstants"
        }
      }
    },
    "ModelConstants": {
      "type": "object",
      "properties": {
        "CONSTANT_CATEGORY": {
          "type": "object",
          "properties": {
            "ConstantName": {
              "type": "number",
              "example": 10
            }
          }
        }
      }
    },
    "UserDetails": {
      "type": "object",
      "description": "user details",
      "properties": {
        "id": {
          "type": "number",
          "example": 45
        },
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doh"
        },
        "email": {
          "type": "string",
          "example": "john.doe@cryptx.io"
        },
        "created_timestamp": {
          "type": "number",
          "example": 1525424340810
        },
        "reset_password_token_hash": {
          "type": "string",
          "example": "79054025255fb1a26e4bc422aef54eb4"
        },
        "reset_password_token_expiry_timestamp": {
          "type": "number",
          "example": 1525424340810
        },
        "is_active": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "UserChangeInfo": {
      "type": "object",
      "description": "changeable user information",
      "properties": {
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doh"
        },
        "is_active": {
          "type": "boolean",
          "example": true
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "number",
            "example": 1
          }
        }
      }
    },
    "InvitationDetails": {
      "type": "object",
      "description": "invitation detials",
      "properties": {
        "id": {
          "type": "number",
          "example": 45
        },
        "was_used": {
          "type": "boolean",
          "example": false
        },
        "token": {
          "type": "string",
          "example": "2394a0ed-3ede-457e-ad60-324532a1ade0"
        },
        "token_expiry_timestamp": {
          "type": "number",
          "example": 1525424340810
        },
        "email": {
          "type": "string",
          "example": "john.doe@cryptx.io"
        },
        "first_name": {
          "type": "string",
          "example": "John"
        },
        "last_name": {
          "type": "string",
          "example": "Doh"
        },
        "role_id": {
          "type": "number",
          "example": 25
        },
        "creator_id": {
          "type": "number",
          "example": 888
        }
      }
    },
    "RoleDetails": {
      "type": "object",
      "description": "role details",
      "properties": {
        "id": {
          "type": "number",
          "example": 48
        },
        "name": {
          "type": "string",
          "example": "System Administrator"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "perm_view_users"
          }
        }
      }
    },
    "UserRoles": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "RolePermissions": {
      "type": "array",
      "items": {
        "type": "string",
        "example": "perm_view_users"
      }
    },
    "UserPassChange": {
      "type": "object",
      "properties": {
        "old_password": {
          "type": "string",
          "example": "scott"
        },
        "new_password": {
          "type": "string",
          "example": "tiger"
        }
      }
    },
    "ReturnRoleResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "role": {
          "$ref": "#/definitions/RoleDetails"
        }
      }
    },
    "ReturnInvitationSentOK": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Send invite to name@mail.com OK"
        }
      }
    },
    "ReturnUserResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "user": {
          "$ref": "#/definitions/UserDetails"
        }
      }
    },
    "ReturnInvitationResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "invitation": {
          "$ref": "#/definitions/InvitationDetails"
        }
      }
    },
    "ReturnUsersListResponse": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ListResponse"
        },
        {
          "properties": {
            "users": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserDetails"
              }
            }
          }
        }
      ]
    },
    "ReturnRolesListResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleDetails"
          }
        },
        "count": {
          "type": "string",
          "example": 26
        }
      }
    },
    "ReturnGroupedPermissionsListResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "number",
          "example": 788,
          "description": "total number of permissions in system"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionsCategory"
          }
        }
      }
    },
    "PermissionsCategory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 787
        },
        "name": {
          "type": "string",
          "example": "Investment Management"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionObject"
          }
        }
      }
    },
    "PermissionObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "example": 787
        },
        "code": {
          "type": "string",
          "example": "perm_view_invest"
        },
        "name": {
          "type": "string",
          "example": "Investment Management"
        }
      }
    },
    "ApiErrorResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": false
        },
        "error": {
          "type": "string"
        }
      }
    },
    "HeaderColListResponse": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "example": "tes"
        },
        "lov": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "val1"
          }
        }
      }
    },
    "LOVFilter": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "example": "tes"
        }
      }
    },
    "ApiSuccessResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "<Some message depending on endpoint context. Not intended for parsing, provides general information to human readers>"
        }
      }
    },
    "ApiUnauthorizezdResponse": {
      "type": "string",
      "example": "Unauthorized"
    }
  },
  "externalDocs": {
    "description": "Find out more about CryptX",
    "url": "https://github.com/twentythirty/CryptX"
  }
}